 ##### $ncal or $cal #####
will allow you to see the current month's calender printed out.
ncal stands for "new cal". There is also a "cal" command that does -
the same exact thing, but ncal adds some fancier functionality


///////section 4 getting help//////

##### man pages #####  $man ncal
to read the specific piece of documentation associated with a given command,
run man command, for example, to learn more about the ncal command we could -
run man cal.
this displays a bunch of information on ncal that we can scroll through. 
type 'q' to exit.


///////section 4 getting help and 5 navigation//////

##### $pwd #####
the print working directory command is super simple but very useful, think of it -
as a "where am I" command.
it will print the path of your current working directory, starting from the root /
for example, if I were on my desktop and I ran pwd, I would see /home/colt/desktop

##### $ls or $ls /home/nicolle #####
The list command will list the contents of a directory.
when used with no options or arguments, it prints a list of the files and folders -
located in the current directory.
We can also list the contents of a specific directory using "ls path". for example -
$ls /bin will print the contents of the /bin directory.

##### $cd /home/nicolle #####
the cd command is used to change the current working directory, "moving" into another directory.
For example... cd chickens would change into the chickens directory (assuming it exists)
cd /home/nicolle would take me to my home directory
$cd .. "to go back one level, or previous folder"


///////section 6 Creating files & folders//////

##### $touch <filename> #####
to create a new file from the command line, use the touch command. provide a filename, and that file will -
be created for you (assuming it does't already exit).
for example, $touch chicken.txt would create a chicken.txt file in the current directory.
if you try to use touch with a file that already exists, it will simply update the access and modifications dates
to the current time.

##### $mkdir <foldername> #####
to create new directories, we use the make directory (mkdir) command. we provide one or more directory
names, and it will create them for us.
for example, to create two new folders, images and styles, we could run mkdir images styles


///////section 7 Nano//////

##### Nano #####
Nano is a simple text editor that we can acces right from the terminal, it's far more accessible than other
popular command-line editors like vim and emacs
Nano includes all the basic text editing functionality you would expect: search, spellcheck, syntax highlighting, etc.

##### $nano file ##### opening files with nano
To open up a file using nano, run nano FILE. for example to open up the file book.txt using nano, we -
would run nano book.txt.
we can also use the same command to edit a file that doesn't yet exist (we can then save it and create the file).

##### editing with nano #####
some editors like vim require us to enter "write mode" before we can start editing a file, but with nano we can
make changes right away.
we can move the cursor using the arrow keys.
at the very botton, we'll see a list of shortcuts that we can use inside of nano, these are super useful!

##### $nano <name of a file that does not exit> ##### this way we create new files with nano
the command above will let you create a new empty file to put text on it, however this file is not created yet
you have to save the file so it will be created, remember you can use ctrl+s to save it.

##### searching with nano ##### shortcurt ctrl-w
use ctrl-w and then enter a search phrase to search FORWARD in the file from your current cursor location


///////section 8 Deleting, Copying, & Moving//////

##### $rm <filename> #####
we use the remove (rm) command to remove files from our machine.
for example, rm app.js would remove the app.js file.
Note: rm DELETES FILES, there is no undo or recycling bin to retrieve them from! they are gone!

##### $rm -r <foldername>#####
to delete empty folders, we need to use the -d option with rm. for example, rm -d cats would remove the
cats directory (only if it's already empty)
to delete folders that are not empty, use the -r option. for example, rm -r chickens would delete the chickens
directory whether it's empty or not.
you definitely want to be careful when deleting directories!

##### $rmdir <emptyfoldername> #####
this command will delete your folder only if it is empty

##### $mv <source> <destination>  ##### for moving files and folders(directory)
use the move command (mv) to move files and directories from one location to another.

when we specify a file or files as the source and directory as the destination, we are moving the files
into the directory

for example, mv app.css styles/ will move the app.css file into the styles directory.

##### $mv <currents> <newname>  ##### renaming is allow too
we can also use the move command to rename files and folders.

if we specify a single file as the source and a single file as the destination, it will rename the file. for example,
to rename the chickens.txt file to roosters.txt, we could run $mv chickens.txt roosters.txt

if we specify a single folder as the source and the destination doesn't yet exist, it will rename the folder.
if the destination folder does exist, it will move our source folder into the destinaion.

##### $cp <source> <destinatoin>  ##### copying files
we can use the copy command to create copies of files and folders.

to create a copy of sheep.txt called dolly.txt, we could run $cp sheep.txt dolly.txt

to copy multiple files into another directory, use cp file1 file2 directory
